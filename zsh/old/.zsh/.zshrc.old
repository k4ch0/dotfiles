export TERM="xterm-256color"
tmux-new() {
  if [[ -n $TMUX ]]; then
    tmux switch-client -t "$(TMUX= tmux -S "${TMUX%,*,*}" new-session -dP "$@")"
  else
    tmux new-session "$@"
  fi
}

export CURRENT_PROJECT="luiscachog.io"

ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=241" # gray highlight
ZSH_AUTOSUGGEST_STRATEGY="history"
ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=15

# Command auto-correction.
ENABLE_CORRECTION="true"

# YSU
YSU_MESSAGE_POSITION="before"


# Changing directories
# #setopt auto_pushd
# setopt pushd_ignore_dups        # Dont push copies of the same dir on stack.
# setopt pushd_minus              # Reference stack entries with "-".
#
# setopt extended_glob


##### Variables #####
export ANSIBLE_COW_SELECTION=tux
export ANSIBLE_NOCOWS=1


# Use modern completion system
autoload -Uz compinit && compinit
autoload -U bashcompinit && bashcompinit

##### Antigen Configuration #####
source ~/.antigen.zsh
# Load the oh-my-zsh's library.
antigen use oh-my-zsh

# Bundles from the default repo (robbyrussell's oh-my-zsh).
antigen bundle robbyrussell/oh-my-zsh lib/
antigen bundles <<EOBUNDLES 
    git
    heroku
    pip
    python
    virtualenv
    lein
    command-not-found
    zsh-users/zsh-completions
    zsh-users/zsh-autosuggestions
    autojump
    soimort/translate-shell
    docker
    kubectl
    colored-man-pages
    history
    tmux
    tmuxinator
    urltools
    golang
    rummik/zsh-tailf
    zlsun/solarized-man
    sparsick/ansible-zsh
    srijanshetty/zsh-pip-completion
    chrissicool/zsh-256color
    popstas/zsh-command-time
    pbar1/zsh-terraform
    MichaelAquilina/zsh-you-should-use
    voronkovich/gitignore.plugin.zsh
EOBUNDLES



# Syntax highlighting bundle.
#antigen bundle zsh-users/zsh-syntax-highlighting
antigen bundle zdharma/fast-syntax-highlighting

# Load the theme.
antigen theme bhilburn/powerlevel9k powerlevel9k
# antigen theme denysdovhan/spaceship-prompt
# https://github.com/denysdovhan/spaceship-prompt

# Tell Antigen that you're done.
antigen apply

##### Sourcing aditional files #####
if [ -f ~/.zsh_aliases  ]; then
    source ~/.zsh_aliases
fi

if [ $TILIX_ID  ] || [ $VTE_VERSION  ]; then
    source /etc/profile.d/vte.sh
fi

if [ $commands[kubectl]  ]; then
    source <(kubectl completion zsh)
fi

if [ $commands[minikube] ]; then
    source <(minikube completion zsh)
fi

##### Functions ##### 
#man() {
#    env \
#    LESS_TERMCAP_mb=$(printf "\e[1;31m")  \
#    LESS_TERMCAP_md=$(printf "\e[1;31m") \
#    LESS_TERMCAP_me=LESS_TERMCAP_me$(printf "\e[0m") \
#    LESS_TERMCAP_se=$(printf "\e[0m") \
#    LESS_TERMCAP_seESS_TERMCAP_so=$(printf "\e[1;44;33m") \
#    LESS_TERMCAP_ue=$(printf "\e[0m") \
#    LESS_TERMCAP_us=$(printf "\e[1;36m") \
#    man "$@"
#}

## Emulate tcsh's backward-delete-word
#tcsh-backward-kill-word () {
#    local WORDCHARS="${WORDCHARS:s#/#}"
#    zle backward-kill-word
#}
#zle -N tcsh-backward-kill-word

# https://github.com/sickill/dotfiles/blob/master/.zsh.d/key-bindings.zsh
tcsh-backward-word () {
  local WORDCHARS="${WORDCHARS:s#./#}"
  zle emacs-backward-word
}
zle -N tcsh-backward-word
bindkey '\e[1;3D' tcsh-backward-word
bindkey '\e^[[D' tcsh-backward-word # tmux

tcsh-forward-word () {
  local WORDCHARS="${WORDCHARS:s#./#}"
  zle emacs-forward-word
}
zle -N tcsh-forward-word
bindkey '\e[1;3C' tcsh-forward-word
bindkey '\e^[[C' tcsh-backward-word # tmux

tcsh-backward-delete-word () {
  local WORDCHARS="${WORDCHARS:s#./#}"
  zle backward-delete-word
}
zle -N tcsh-backward-delete-word
bindkey "^[^?" tcsh-backward-delete-word # urxvt

# =============================================================================
#                                 Completions
# =============================================================================

zstyle ':completion:*' rehash true
#zstyle ':completion:*' verbose yes
#zstyle ':completion:*:descriptions' format '%B%d%b'
#zstyle ':completion:*:messages' format '%d'
#zstyle ':completion:*:warnings' format 'No matches for: %d'
#zstyle ':completion:*' group-name ''

# case-insensitive (all), partial-word and then substring completion
zstyle ":completion:*" matcher-list \
  "m:{a-zA-Z}={A-Za-z}" \
  "r:|[._-]=* r:|=*" \
  "l:|=* r:|=*"

zstyle ":completion:*:default" list-colors ${(s.:.)LS_COLORS}

## Scripts ##
#python3 ~/bin/ranwhen/ranwhen.py
. "/home/luis7238/.acme.sh/acme.sh.env"

#export PATH="/home/luis7238/.pyenv/bin:$PATH"
#eval "$(pyenv init -)"
#eval "$(pyenv virtualenv-init -)"

if [ -d ~/.pyenv  ]; then
  eval "$(pyenv init -)"
  eval "$(pyenv virtualenv-init -)"
  export PATH=$(pyenv root)/bin:$PATH
  export PYENV_VIRTUALENV_DISABLE_PROMPT=1
fi


if [ -d ~/.virtualenvs  ]; then
  export WORKON_HOME=$HOME/.virtualenvs
  source /home/luis7238/.pyenv/versions/2.7.12/bin/virtualenvwrapper.sh
fi

export PATH="/home/luis7238/.minishift/cache/oc/v3.11.0/linux:$PATH"
#eval $(minishift oc-env)
source <(oc completion zsh)

if [ -f ~/.minishift-completion ];then
    source ~/.minishift-completion
fi

autoload -U +X bashcompinit && bashcompinit
complete -o nospace -C /home/luis7238/bin/packer packer
